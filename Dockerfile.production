# Build stage
FROM node:18-alpine AS builder

# Build arguments for non-sensitive data
ARG NODE_ENV
ARG PORT
ARG POSTGRES_USER
ARG POSTGRES_DB
ARG POSTGRES_HOST
ARG POSTGRES_PORT
ARG NODE_TLS_REJECT_UNAUTHORIZED

# Mount secrets at build time
RUN --mount=type=secret,id=db_password \
    --mount=type=secret,id=db_url \
    export POSTGRES_PASSWORD="$(cat /run/secrets/db_password)" && \
    export DATABASE_URL="$(cat /run/secrets/db_url)"

# Set environment variables for build stage
ENV NODE_ENV=$NODE_ENV \
    PORT=$PORT \
    POSTGRES_USER=$POSTGRES_USER \
    POSTGRES_DB=$POSTGRES_DB \
    POSTGRES_HOST=$POSTGRES_HOST \
    POSTGRES_PORT=$POSTGRES_PORT \
    NODE_TLS_REJECT_UNAUTHORIZED=1

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY client/package*.json ./client/

# Install dependencies using npm ci for faster, reliable builds
RUN npm ci && \
    cd client && npm ci

# Copy source code
COPY . .

# Build client and server
RUN cd client && npm run build && \
    cd .. && npm run build

# Production stage
FROM node:18-alpine

# Build arguments for non-sensitive data
ARG NODE_ENV
ARG PORT
ARG POSTGRES_USER
ARG POSTGRES_DB
ARG POSTGRES_HOST
ARG POSTGRES_PORT
ARG NODE_TLS_REJECT_UNAUTHORIZED

# Mount secrets at runtime
RUN --mount=type=secret,id=db_password \
    --mount=type=secret,id=db_url \
    export POSTGRES_PASSWORD="$(cat /run/secrets/db_password)" && \
    export DATABASE_URL="$(cat /run/secrets/db_url)"

# Set production environment variables
ENV NODE_ENV=$NODE_ENV \
    PORT=$PORT \
    POSTGRES_USER=$POSTGRES_USER \
    POSTGRES_DB=$POSTGRES_DB \
    POSTGRES_HOST=$POSTGRES_HOST \
    POSTGRES_PORT=$POSTGRES_PORT \
    NODE_TLS_REJECT_UNAUTHORIZED=1

WORKDIR /app

# Install netcat and create non-root user
RUN apk add --no-cache netcat-openbsd && \
    addgroup -S appgroup && \
    adduser -S appuser -G appgroup

# Copy package files for production dependencies
COPY --from=builder /app/package*.json ./
RUN npm ci --only=production

# Copy built artifacts and necessary files
COPY --from=builder --chown=appuser:appgroup /app/dist ./dist
COPY --from=builder --chown=appuser:appgroup /app/client/dist ./client/dist

# Create required directories with proper permissions
RUN mkdir -p /app/db/migrations /app/uploads && \
    chown -R appuser:appgroup /app

# Copy migrations with proper permissions
COPY --from=builder --chown=appuser:appgroup /app/db/migrations/*.sql /app/db/migrations/
COPY --from=builder --chown=appuser:appgroup /app/db/migrate.* /app/db/

# Copy and configure entrypoint script
COPY docker-entrypoint.sh /app/
RUN chmod +x /app/docker-entrypoint.sh && chown appuser:appgroup /app/docker-entrypoint.sh

# Switch to non-root user
USER appuser

# Expose port
EXPOSE $PORT

# Set entrypoint
ENTRYPOINT ["/app/docker-entrypoint.sh"]
